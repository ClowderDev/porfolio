export const nodejsTypescriptGuide = {
  id: "nodejs-typescript-guide",
  slug: "nodejs-typescript-guide",
  title:
    "H∆∞·ªõng d·∫´n setup d·ª± √°n Node.js v·ªõi TypeScript, ESLint v√† Prettier (2025)",
  excerpt:
    'Gi·ªù m√† b·∫°n c√≤n code Node.js v·ªõi JavaScript thu·∫ßn th√¨ h∆°i‚Ä¶ l·∫°c h·∫≠u r·ªìi ƒë·∫•y! üòÖ TypeScript gi·ªù g·∫ßn nh∆∞ l√† ti√™u chu·∫©n "b·∫•t kh·∫£ kh√°ng" khi l√†m d·ª± √°n li√™n quan ƒë·∫øn JS. ',
  content: `# H∆∞·ªõng d·∫´n setup d·ª± √°n Node.js v·ªõi TypeScript, ESLint v√† Prettier (2025)


## ESLint & Prettier l√† g√¨?

**ESLint**: Gi√∫p b·∫°n chu·∫©n h√≥a code, tr√°nh l·ªói v√† duy tr√¨ style code nh·∫•t qu√°n.

**Prettier**: ƒê·ªãnh d·∫°ng code ƒë·∫πp, ƒë·ªìng b·ªô t·ª± ƒë·ªông.

Khi b·∫°n l√†m vi·ªác nh√≥m, m·ªçi ng∆∞·ªùi code kh√¥ng ƒë·ªìng nh·∫•t s·∫Ω r·∫•t d·ªÖ g√¢y r·ªëi. ESLint + Prettier s·∫Ω l√† "c·ª©u tinh" gi√∫p team b·∫°n gi·ªØ code s·∫°ch v√† ƒë·∫πp.

## C·∫•u tr√∫c th∆∞ m·ª•c d·ª± √°n m√¨nh th∆∞·ªùng d√πng nh∆∞ sau:

\`\`\`json
nodejs-typescript
 ‚î£ dist/          # Code build ra (JavaScript)
 ‚î£ src/           # Code ngu·ªìn (TypeScript)
 ‚îÉ ‚î£ constants/   # H·∫±ng s·ªë, enum
 ‚îÉ ‚î£ controllers/ # X·ª≠ l√Ω request, g·ªçi service
 ‚îÉ ‚î£ middlewares/ # Middleware (validate, auth,...)
 ‚îÉ ‚î£ models/      # Model, database
 ‚îÉ ‚î£ routes/      # Route API
 ‚îÉ ‚î£ services/    # Logic, g·ªçi DB
 ‚îÉ ‚î£ utils/       # H√†m ti·ªán √≠ch (email, crypto,...)
 ‚îÉ ‚î£ index.ts     # Entry point
 ‚îÉ ‚îó type.d.ts    # Global types
 ‚î£ .eslintrc      # C·∫•u h√¨nh ESLint
 ‚î£ .prettierrc    # C·∫•u h√¨nh Prettier
 ‚î£ .editorconfig  # Chu·∫©n editor
 ‚î£ nodemon.json   # Config nodemon (dev)
 ‚î£ package.json
 ‚î£ tsconfig.json  # C·∫•u h√¨nh TypeScript
\`\`\`

## B·∫Øt ƒë·∫ßu t·∫°o d·ª± √°n

\`\`\`bash
mkdir nodejs-typescript
cd nodejs-typescript
npm init -y
npm install typescript @types/node --save-dev
\`\`\`

## C√†i ESLint

\`\`\`bash
npm init @eslint/config@latest
\`\`\`

Ch·ªçn nh∆∞ sau:

- Use ESLint to check syntax and find problems
- Module type: JavaScript modules (import/export)
- Framework: None
- TypeScript: Yes
- Run on Node environment

C√†i th√™m:

\`\`\`bash
npm install prettier eslint-config-prettier eslint-plugin-prettier tsx tsc-alias rimraf nodemon --save-dev
\`\`\`

## C·∫•u h√¨nh tsconfig.json
L∆∞u √Ω: t·∫°o file type.d.ts tr·ªëng trong src ƒë·ªÉ tr√°nh l·ªói
\`\`\`json
{
  "compilerOptions": {
    "module": "NodeNext",
    "target": "ES2023",
    "outDir": "dist",
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "~/*": ["src/*"]
    }
  },
  "files": ["src/type.d.ts"],
  "include": ["src/**/*"]
}
\`\`\`

## C·∫•u h√¨nh ESLint (eslint.config.mjs)

\`\`\`javascript
import globals from 'globals'
import pluginJs from '@eslint/js'
import tseslint from 'typescript-eslint'
import eslintPluginPrettier from 'eslint-plugin-prettier'

export default [
  { files: ['**/*.{js,mjs,cjs,ts}'] },
  { languageOptions: { globals: globals.node } },
  pluginJs.configs.recommended,
  ...tseslint.configs.recommended,
  {
    plugins: { prettier: eslintPluginPrettier },
    rules: {
      '@typescript-eslint/no-explicit-any': 'warn',
      '@typescript-eslint/no-unused-vars': 'warn',
      'prettier/prettier': ['warn', {
        arrowParens: 'always',
        semi: false,
        trailingComma: 'none',
        tabWidth: 2,
        endOfLine: 'auto',
        useTabs: false,
        singleQuote: true,
        printWidth: 120,
        jsxSingleQuote: true
      }]
    },
    ignores: ['**/node_modules/', '**/dist/']
  }
]
\`\`\`

## C·∫•u h√¨nh Prettier (.prettierrc)

\`\`\`json
{
  "arrowParens": "always",
  "semi": false,
  "trailingComma": "none",
  "tabWidth": 2,
  "endOfLine": "auto",
  "useTabs": false,
  "singleQuote": true,
  "printWidth": 120,
  "jsxSingleQuote": true
}
\`\`\`

## T·∫°o .prettierignore

\`\`\`json
node_modules/
dist/
\`\`\`

## M·ªôt s·ªë file config h·ªó tr·ª£ kh√°c

- **.editorconfig**: chu·∫©n h√≥a indent size, style (d√πng cho nhi·ªÅu editor)
- **.gitignore**: b·ªè qua node_modules/, dist/ kh·ªèi git
- **nodemon.json**: t·ª± ƒë·ªông restart server khi code thay ƒë·ªïi

\`\`\`json
{
  "watch": ["src", ".env"],
  "ext": ".ts,.js",
  "exec": "tsx ./src/index.ts"
}
\`\`\`

## Script trong package.json

\`\`\`json
"scripts": {
  "dev": "npx nodemon",
  "build": "rimraf ./dist && tsc && tsc-alias",
  "start": "node dist/index.js",
  "lint": "eslint .",
  "lint:fix": "eslint . --fix",
  "prettier": "prettier --check .",
  "prettier:fix": "prettier --write ."
}
\`\`\`

## Test nhanh

T·∫°o file \`src/index.ts\`

\`\`\`typescript
const name: string = 'ClowderDev'
console.log(name)
\`\`\`

Ch·∫°y dev:

\`\`\`bash
npm run dev
\`\`\`

Build:

\`\`\`bash
npm run build
npm run start
\`\`\`

## M·ªôt v√†i l∆∞u √Ω nh·ªè

1.N·∫øu d√πng th∆∞ vi·ªán JS, nh·ªõ c√†i th√™m \`@types/\` t∆∞∆°ng ·ª©ng n·∫øu c√≥

2.D·ª± √°n v·∫´n ch·∫°y CommonJS, n√™n khi d√πng th∆∞ vi·ªán ES Module ph·∫£i import theo d·∫°ng ƒë·ªông:

\`\`\`typescript
const lib = (await import('lib')).default
\`\`\`

3. Lu√¥n c√†i extension ESLint v√† Prettier cho VS Code ƒë·ªÉ t·ª± ƒë·ªông check, format code`,
  author: "ClowderDev",
  date: "2025-08-12",
  readTime: "12 min read",
  image: "/blogs/nodejs-typescript.png",
  tags: ["Node.js", "TypeScript", "ESLint", "Prettier", "Setup Guide"],
  featured: false,
};
